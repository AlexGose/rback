#!/usr/bin/env bash
#
# Rsync-based script for backups

error() {
  echo "ERROR: ${BASH_SOURCE[0]}: $1" >&2
  exit 1
}

usage() {
  local usage_string
  usage_string="Usage: rsync_backup OPTIONS
  OPTIONS
  -h                     Display this help message"
  echo "${usage_string}"
}

# Rotate snapshot folders by a given interval of elapsed time
#
# If snapshot folders corresponding to
#   <start>, <start> + <interval>, <start> + 2 <interval>, ..., <limit>
# <time unit>s already exist, then this function rotates each to the next
# highest interval.  The last folder will be rotated to the first folder, 
# corresponding to <start> <time unit>s.
#
# If there is not a snapshot corresponding to <limit> <time unit>s, then
# an empty snapshot folder corresponding to <start> <time unit>s will be
# created.
#
# Usage: rotate_snapshots <backup dir> <time unit> <start> <interval> <limit>
#
# Inputs: <backup dir> - path to the directory containing all snapshot folders
#         <time unit> - unit of time ("minute","hour","day",etc.)
#         <start> - integer elapsed start time, time of the first snapshot
#         <interval> - integer interval of elapsed time, time between snapshots
#         <limit> - integer limit of elapsed time, time limit of snapshots
#
# In the backup directory, a snapshot folder for <limit> + <interval> elapsed
# time will be created temporarily if it does not already exist; otherwise,
# an error will occur.  Other folders and files in the backup directory will
# potentially be modified or deleted.
rotate_snapshots() {
  local backup_dir
  backup_dir=$1
  local time_unit
  time_unit=$2
  local start
  start=$3
  local interval
  interval=$4
  local limit
  limit=$5
  if [[ -d "${backup_dir}/${time_unit}.$(( limit + interval ))" ]]; then
    local error_prefix
    error_prefix="${FUNCNAME[0]}: ${LINENO[0]}: ${backup_dir}/"
    error "${error_prefix}${time_unit}.$(( limit + interval )) already exists"
  fi

  for (( n = limit; n >= start; n -= interval )); do
    if [[ -d "${backup_dir}/${time_unit}.${n}" ]]; then
      mv -- "${backup_dir}/${time_unit}.${n}" \
          "${backup_dir}/${time_unit}.$(( n + interval ))"
    fi
  done

  if [[ -d "${backup_dir}/${time_unit}.$(( limit + interval ))" ]]; then
    # move last snapshot folder to the start
    mv -- "${backup_dir}/${time_unit}.$(( limit + interval ))" \
      "${backup_dir}/${time_unit}.${start}"
  else # no last snapshot folder exists
    mkdir "${backup_dir}/${time_unit}.${start}"
  fi
}

main() {
  if (( $# == 0 )); then
    usage
    error "${FUNCNAME[0]}: ${LINENO[0]}: at least one option required"
  fi

  while getopts :h opt; do
    case "${opt}" in
      h) usage; exit 0 ;;
      *) : ;;
    esac
  done
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  main "$@"
fi

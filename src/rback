#!/usr/bin/env bash
#
# Rsync-based script for backups

error() {
  local timestamp
  timestamp=""
  if (( $# > 1 )) && [[ "$2" == "true" ]]; then
    timestamp+="$(date +"%F %T"): "
  fi
  echo "${timestamp}ERROR: ${BASH_SOURCE[0]}: $1" >&2
  exit 1
}

assert_positive_int_arg() {
  if ! [[ "$1" =~ ^[1-9][0-9]*$ ]]; then
    error "$2: $3: $4 argument: $1, but expected a positive integer" "$5"
  fi
}

usage() {
  if [[ "$1" == "true" ]]; then
      echo "$(date +"%F %T"): INFO:"
  fi
  local usage_string
  usage_string="Usage: rback -h
       rback [ -v ] [ [ --delete-excluded ] --exclude-file <filename> ] \\
           -- UNIT START INTERVAL LIMIT SRC1 [ SRC2 [ ... ] ] DEST
       rback -r [ -v ] [ [ --delete-excluded ] --exclude-file <filename> ] \\
           -- UNIT1 START1 INTERVAL1 LIMIT1 UNIT2 START2 INTERVAL2 DEST
  OPTIONS
    -h, --help            Display this help message
    -r, --rotate          Rotate snapshots.  Update snapshots without back up
    -v, --verbose         Enable logging.  Verbose output with timestamps
    -x, --exclude-file    Flag for exclusion file passed to Rsync
    -d, --delete-excluded Flag for deleting excluded backup files and folders
  ARGS
    UNIT                  Unit of time (minute, hour, day, week, month, etc.)
    START                 Integer elapsed start time, time for first snapshot
    INTERVAL              Integer interval of elapsed time between snapshots
    LIMIT                 Integer limit of elapsed time, time for last snapshot
    SRC                   Path to source directory or file(s) to be backed up
    DEST                  Path to backup folder where snapshots will be stored"
  echo "${usage_string}"
}

# Rotate snapshot folders by a given interval of elapsed time
#
# If snapshot folders corresponding to
#   <start>, <start> + <interval>, <start> + 2 <interval>, ..., <limit>
# <time unit>s already exist, then this function rotates each to the next
# highest interval.  The last folder will be rotated to the first folder, 
# corresponding to <start> <time unit>s.
#
# If there is not a snapshot corresponding to <limit> <time unit>s, then
# an empty snapshot folder corresponding to <start> <time unit>s will be
# created.
#
# Usage: rotate <backup dir> <time unit> <start> <interval> <limit>
#
# Inputs: <backup dir> - path to the directory containing all snapshot folders
#         <time unit> - unit of time ("minute","hour","day",etc.)
#         <start> - integer elapsed start time, time of the first snapshot
#         <interval> - integer interval of elapsed time, time between snapshots
#         <limit> - integer limit of elapsed time, time limit of snapshots
#
# In the backup directory, a snapshot folder for <limit> + <interval> elapsed
# time will be created temporarily if it does not already exist; otherwise,
# an error will occur.  Snapshot folders in the backup directory will
# potentially be renamed.
rotate() {
  local backup_dir
  backup_dir=$1
  local time_unit
  time_unit=$2
  local start
  start=$3
  local interval
  interval=$4
  local limit
  limit=$5

  local temp_folder # temporary snapshot folder name
  temp_folder="${backup_dir}/${time_unit}.$(( limit + interval ))"
  temp_folder+=".$(( interval ))"

  if [[ -d "${temp_folder}" ]]; then
    error "${FUNCNAME[0]}: ${LINENO[0]}: ${temp_folder} already exists"
  fi

  for (( n = limit; n >= start; n -= interval )); do
    update "${backup_dir}" "${time_unit}" $n "${interval}"
  done
  update "${backup_dir}" "${time_unit}" "$(( limit + interval ))" \
        "${interval}" "${start}"
}

# Update a snapshot folder to the next interval of, or given, elapsed time
#
# Usage: update <backup dir> <time unit> <time before> <interval> \
#                [<time after>]
#
# Inputs: 
#    <backup dir> - path to the directory containing all the snapshot folders
#    <time unit> - unit of time ("minute","hour","day",etc.)
#    <time before> - integer elapsed time for the snapshot before update
#    <interval> - integer interval of elapsed time, for the snapshot before
#                 update
#    <time after> - (optional) integer elapsed time, for the snapshot after
#                 update.  An empty argument implies that the snapshot
#                 will have a total elapsed time of <time before> + <interval>
#                 after update 
#
#  This function changes the name of the snapshot folder corresponding to the
#  input arguments, if such a snapshot exits.  Otherwise, in the case of 4 
#  input arguments, nothing will be done.  In the case of 5 input arguments,
#  the function will create an empty snapshot folder corresponding to the
#  elapsed time after the update.  An error will occur if the
#  number of arguments to this function is incorrect.
update() {
  local snapshot_prefix
  snapshot_prefix="$1/$2."
  local elapsed_time
  elapsed_time=$3
  local interval
  interval=$4
  local snapshot_to_update
  snapshot_to_update=${snapshot_prefix}$(( elapsed_time )).$(( interval ))

  if (( $# == 4 )); then
    if [[ -d "${snapshot_to_update}" ]]; then
      mv -- "${snapshot_to_update}" \
          "${snapshot_prefix}$(( elapsed_time + interval )).$(( interval ))"
    fi
  elif (( $# == 5 )); then
    if [[ -d "${snapshot_to_update}" ]]; then
      mv -- "${snapshot_to_update}" "${snapshot_prefix}$5.$(( interval ))"
    else
      mkdir "${snapshot_prefix}$5.$(( interval ))"
    fi
  else
    local error_prefix
    error_prefix="${FUNCNAME[0]}: ${LINENO[0]}:"
    error "${error_prefix} $# arguments were passed, but expected 4 or 5."
  fi
}

main() {
  if (( $# == 0 )); then
    usage
    error "${FUNCNAME[0]}: ${LINENO[0]}: at least one option required"
  fi

  local rotate_flag
  rotate_flag="false"
  local exclude_file
  exclude_file=""
  local delete_excluded
  delete_excluded="false"
  local verbose
  verbose="false"
  local unknown_option
  unknown_option=""
  local error_prefix
  error_prefix=""

  while :; do
    case "$1" in
      -h|--help) usage; exit 0 ;; 
      -r|--rotate) rotate_flag="true" ;;
      -x|--exclude-file|--exclude-from) exclude_file="$2"; shift ;;
      -d|--delete-excluded) delete_excluded="true" ;;
      -v|--verbose) verbose="true" ;;
      --) shift; break ;;
      -*) unknown_option="$1" ;;
      *) break ;;
    esac
    shift
  done

  if [[ -n "${unknown_option}" ]]; then
    error "${FUNCNAME[0]}: ${LINENO[0]}: Unknown option \"${unknown_option}\"" \
        "${verbose}"
  fi


  if [[ "${delete_excluded}" == "true" ]] && ! [[ -f "${exclude_file}" ]]; then
      error "${FUNCNAME[0]}: ${LINENO[0]}: \"-x\" is required with \"-d\""
  fi

  if (( $# < 6  )); then
    usage "${verbose}"
    error_prefix="${FUNCNAME[0]}: ${LINENO[0]}:"
    error "${error_prefix}: $# arguments, but at least 6 required" "${verbose}"
  fi
  if [[ "${rotate_flag}" == "true" ]] && (( $# != 8 )); then
    usage
    error "${FUNCNAME[0]}: ${LINENO[0]}: $# arguments, but expected 8"
  fi

  local time_unit
  time_unit="$1"
  shift
  
  assert_positive_int_arg "$1" "${FUNCNAME[0]}" "${LINENO[0]}" "second" \
      "${verbose}"
  local start
  start="$1"
  shift
  
  assert_positive_int_arg "$1" "${FUNCNAME[0]}" "${LINENO[0]}" "third" \
      "${verbose}"
  local interval
  interval="$1"
  shift
  
  assert_positive_int_arg "$1" "${FUNCNAME[0]}" "${LINENO[0]}" "fourth" \
      "${verbose}"
  local limit
  limit="$1"
  shift

  if (( start > limit )); then
    error_prefix="${FUNCNAME[0]}: ${LINENO[0]}:"
    error "${error_prefix} START ${start} exceeds LIMIT ${limit}" "${verbose}"
  fi

  local backup_dir
  local source_dir
  local link_dest
  local target_dir

  if [[ "${rotate_flag}" == "false" ]]; then
    source_dir=()
    while (( $# > 1 )); do
      source_dir+=("$1")
      shift
    done
    backup_dir="$1"
    link_dest="${backup_dir}/${time_unit}.$(( start + interval )).${interval}"
  else
    backup_dir="$4"
    assert_positive_int_arg "$2" "${FUNCNAME[0]}" "${LINENO[0]}" "sixth" \
        "${verbose}"
    assert_positive_int_arg "$3" "${FUNCNAME[0]}" "${LINENO[0]}" "seventh" \
        "${verbose}"
    source_dir=("${backup_dir}/$1.$2.$3/")
    link_dest="${source_dir[0]}"
  fi
  
  rotate "${backup_dir}" "${time_unit}" "${start}" "${interval}" "${limit}"
  target_dir="${backup_dir}/${time_unit}.$(( start )).${interval}"

  local rsync_opts
  rsync_opts=("--link-dest=${link_dest}" --delete -a)
  local rsync_args
  rsync_args=("${source_dir[@]}" "${target_dir}")

  if [[ -f "${exclude_file}" ]]; then
    rsync_opts+=("--exclude-from=${exclude_file}")
    if [[ "${delete_excluded}" == "true" ]]; then
      rsync_opts+=("--delete-excluded")
    fi
  fi
  if rsync "${rsync_opts[@]}" -- "${rsync_args[@]}" 2>/dev/null; then
    if [[ "${verbose}" == "true" ]]; then
      if [[ "${rotate_flag}" == "true" ]]; then
        echo "$(date +"%F %T"): snapshot rotation completed"
      else
        echo "$(date +"%F %T"): backup completed"
      fi
    fi
  else
      error "${FUNCNAME[0]}: ${LINENO[0]}: Rsync error" "${verbose}"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  main "$@"
fi

#!/usr/bin/env bash
#
# Rsync-based script for backups

error() {
  echo "ERROR: ${BASH_SOURCE[0]}: $1" >&2
  exit 1
}

usage() {
  local usage_string
  usage_string="Usage: rback OPTIONS
  OPTIONS
  -h                     Display this help message"
  echo "${usage_string}"
}

# Rotate snapshot folders by a given interval of elapsed time
#
# If snapshot folders corresponding to
#   <start>, <start> + <interval>, <start> + 2 <interval>, ..., <limit>
# <time unit>s already exist, then this function rotates each to the next
# highest interval.  The last folder will be rotated to the first folder, 
# corresponding to <start> <time unit>s.
#
# If there is not a snapshot corresponding to <limit> <time unit>s, then
# an empty snapshot folder corresponding to <start> <time unit>s will be
# created.
#
# Usage: rotate_snapshots <backup dir> <time unit> <start> <interval> <limit>
#
# Inputs: <backup dir> - path to the directory containing all snapshot folders
#         <time unit> - unit of time ("minute","hour","day",etc.)
#         <start> - integer elapsed start time, time of the first snapshot
#         <interval> - integer interval of elapsed time, time between snapshots
#         <limit> - integer limit of elapsed time, time limit of snapshots
#
# In the backup directory, a snapshot folder for <limit> + <interval> elapsed
# time will be created temporarily if it does not already exist; otherwise,
# an error will occur.  Snapshot folders in the backup directory will
# potentially be renamed.
rotate_snapshots() {
  local backup_dir
  backup_dir=$1
  local time_unit
  time_unit=$2
  local start
  start=$3
  local interval
  interval=$4
  local limit
  limit=$5

  local temp_folder # temporary snapshot folder name
  temp_folder="${backup_dir}/${time_unit}.$(( limit + interval ))"
  temp_folder+=".$(( interval ))"

  if [[ -d "${temp_folder}" ]]; then
    error "${FUNCNAME[0]}: ${LINENO[0]}: ${temp_folder} already exists"
  fi

  for (( n = limit; n >= start; n -= interval )); do
    shift_snapshot "${backup_dir}" "${time_unit}" $n "${interval}"
  done
  shift_snapshot "${backup_dir}" "${time_unit}" "$(( limit + interval ))" \
        "${interval}" "${start}"
}

# Shift a snapshot folder to the next interval of, or given, elapsed time
#
# Usage: shift_snapshot <backup dir> <time unit> <time before> <interval> \
#                [<time after>]
#
# Inputs: 
#    <backup dir> - path to the directory containing all the snapshot folders
#    <time unit> - unit of time ("minute","hour","day",etc.)
#    <time before> - integer elapsed time for the snapshot before being shifted
#    <interval> - integer interval of elapsed time, for the snapshot before
#                 being shifted
#    <time after> - (optional) integer elapsed time, for the snapshot after
#                 being shifted.  An empty argument implies that the snapshot
#                 will have a total elapsed time of <time before> + <interval>
#                 after being shifted
#
#  This function changes the name of the snapshot folder corresponding to the
#  input arguments, if such a snapshot exits.  Otherwise, in the case of 4 
#  input arguments, nothing will be done.  In the case of 5 input arguments,
#  the function will create an empty snapshot folder corresponding to the
#  elapsed time after the shift.  An error will occur if the
#  number of arguments to this function is incorrect.
shift_snapshot() {
  local snapshot_prefix
  snapshot_prefix="$1/$2."
  local elapsed_time
  elapsed_time=$3
  local interval
  interval=$4
  local snapshot_to_shift
  snapshot_to_shift=${snapshot_prefix}$(( elapsed_time )).$(( interval ))

  if (( $# == 4 )); then
    if [[ -d "${snapshot_to_shift}" ]]; then
      mv -- "${snapshot_to_shift}" \
          "${snapshot_prefix}$(( elapsed_time + interval )).$(( interval ))"
    fi
  elif (( $# == 5 )); then
    if [[ -d "${snapshot_to_shift}" ]]; then
      mv -- "${snapshot_to_shift}" "${snapshot_prefix}$5.$(( interval ))"
    else
      mkdir "${snapshot_prefix}$5.$(( interval ))"
    fi
  else
    local error_prefix
    error_prefix="${FUNCNAME[0]}: ${LINENO[0]}:"
    error "${error_prefix} $# arguments were passed, but expected 4 or 5."
  fi
}

main() {
  if (( $# == 0 )); then
    usage
    error "${FUNCNAME[0]}: ${LINENO[0]}: at least one option required"
  fi

  while getopts :h opt; do
    case "${opt}" in
      h) usage; exit 0 ;;
      *) : ;;
    esac
  done
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  main "$@"
fi
